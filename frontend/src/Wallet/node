D:\eventpedia\frontend\node_modules\babel-cli\bin\babel.js
var MetamaskSigner = require('./MetamaskSigner.js');
var EventpediaContract = require('./EventpediaContract');
var Promise = require('bluebird');
var { providers } = require('ethers');

// Use Web3 to handle account selection & transactions.
class Wallet {
  constructor() {
    init();
  }

  async init() {
    let wallet = await login();
    this.activeWallet = wallet.activeWallet;
    this.activeContract = wallet.activeContract;
  }

  async checkEthAccount() {
    this.networkID = await getNetWorkID();

    if (networkID != '3') throw new Error('Wrong network! Switch to Ropsten.');
    // Get current account
    return provider.sendAsync({
      method: 'eth_accounts',
      params: []
    });
  }

  async getNetWorkID() {
    if (typeof web3 !== 'undefined' && typeof web3.currentProvider !== 'undefined') {
      var provider = web3.currentProvider;
      provider.sendAsync = Promise.promisify(provider.sendAsync);
      // Check network
      return provider.sendAsync({
        method: 'net_version',
        params: []
      });
    } else {
      throw new Error('No web3 or web3.currentProvider found. Do you have Metamask?');
    }
  }
  async login() {
    let res = await checkEthAccount();
    return new Promise((resolve, reject) => {
      var address = res.result[0];
      if (!address) throw new Error('MetaMask is locked! Please open MetaMask to unlock it.');
      alert("metamask connection succeeds, your address is: " + address);
      wallet = new MetamaskSigner(web3);
      wallet.provider = providers.getDefaultProvider('ropsten');
      activeWallet = wallet;
      activeContract = EventpediaContract(wallet);
      resolve({ activeWallet, activeContract });
    });
  }
}

export default Wallet;

